resource "aws_cloudwatch_log_group" "aws_cloudwatch_log_group" {
  for_each          = local.lambda
  name              = "/aws/lambda/${var.environment}-${each.key}"
  retention_in_days = 7
}

data "aws_lambda_layer_version" "aws_lambda_layer_version" {
  layer_name = data.terraform_remote_state.s3-upload.outputs.lambda_layer_shared_name
}

data "aws_lambda_layer_version" "aws_lambda_layer_version_aws" {
  layer_name = data.terraform_remote_state.s3-upload.outputs.lambda_layer_sdk_name
}

resource "aws_lambda_function" "aws_lambda_function" {
  depends_on    = [aws_security_group.lambda-sg, aws_iam_role.aws_iam_role, aws_iam_role_policy_attachment.aws_iam_role_policy_attachment, aws_efs_file_system.aws_efs_file_system, aws_efs_access_point.aws_efs_access_point, aws_efs_mount_target.aws_efs_mount_target, aws_iam_role_policy_attachment.lambda-vpc-role-policy-attach]
  for_each      = local.lambda
  s3_bucket     = each.value.s3_bucket
  s3_key        = "${var.environment}-${each.key}/${data.aws_ssm_parameter.aws_ssm_parameter[each.key].value}.zip"
  function_name = "${var.environment}-${each.key}"
  description   = "Lambda Function for ${each.key}"
  layers        = each.value.layer == "" ? [data.aws_lambda_layer_version.aws_lambda_layer_version.arn] : [data.aws_lambda_layer_version.aws_lambda_layer_version.arn, each.value.layer]
  role          = aws_iam_role.aws_iam_role.arn
  handler       = each.value.handler
  runtime       = each.value.runtime
  timeout       = each.value.timeout
  publish       = true
  memory_size   = each.value.memory_size
  file_system_config {
    arn              = aws_efs_access_point.aws_efs_access_point.arn
    local_mount_path = "/mnt/database"
  }

  vpc_config {
    security_group_ids = [aws_security_group.lambda-sg.id]
    subnet_ids         = data.terraform_remote_state.vpc.outputs.db_subnets
  }

  ephemeral_storage {
    size = 10240
  }

  environment {
    variables = merge(each.value.environment_variables,
      {
        AWS_REGION_NAME = var.aws_region
      },
      {
        SW_AWS_ACCESS_KEY = jsondecode(data.aws_secretsmanager_secret_version.aws_secretsmanager_secret_version.secret_string)["SW_AWS_ACCESS_KEY"]
      },
      {
        SW_AWS_SECRET_KEY = jsondecode(data.aws_secretsmanager_secret_version.aws_secretsmanager_secret_version.secret_string)["SW_AWS_SECRET_KEY"]
      },
      {
        SW_STAGE = var.environment
      }
    )
  }
}
